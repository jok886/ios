App架构设计经验谈:接口的设计
接口的数据一般都采用JSON格式进行传输

App架构设计经验谈:技术选型
MVC/MVP/MVVM
MVC ，用户操作> View (负责接受用户的输入操作)>Controller（业务逻辑处理）>Model（数据持久化）>View（将结果通过View反馈给用户）
MVVM是将“数据模型数据双向绑定”的思想作为核心，因此在View和Model之间没有联系，通过ViewModel进行交互，而且Model和ViewModel之间的交互是双喜那个的，因此试图的数据的变化会同事修改数据源，而数据源数据的变化也会立即反应到View上。



App架构设计经验谈:数据层的设计
从职责上划分就是：数据管理、数据加工、数据展示。相对应的也就有了三层架构：数据层、业务层、展示层。本文就先讲讲数据层的设计。
调用网络API，获取数据；
将数据缓存到本地；
将数据交付给上一层。
根据这三个任务，数据层可以再拆分为三层：网络层、本地数据层、交付层。



App架构设计经验谈:业务层的设计
向下获取数据， 自己处理加工数据， 向上， 给展示层提供接口供其调用，让展示层获取处理后的数据.

App架构设计经验谈:展示层的设计
工程结构其实就是模块的划分，无非分为两类：按业务划分或按组件划分


六大设计原则：
单一职责原则
开闭原则
接口隔离原则
依赖倒置原则
里氏置换原则
迪米特法则


 单一职责原则： 一个类只负责一个事
 开闭原则： 对修改关闭，对扩展开放
 接口隔离原则：使用多个专门的协议、而不是一个庞大臃肿的协议，协议中的方法尽量少  uitableviewdelgate
 依赖倒置原则：抽象不应依赖于具体实现，具体实现可以依赖于抽象    增删改查
 里氏置换原则：父类可以被子类无缝替换，切原有功能不受任何影响  ，(kvo)
 迪米特法则：一个对象应当对其他对象有尽可能少的了解  ， 高内聚 ，低耦合
 
 
 
 设计模式：
 责任链
 桥接
 适配器
 单例
 命令
 
 
 淘汰策略：
 队列先进先出
 LRU(30分钟之内是否使用过)
 定时检查         提高检查触发频率
             每次进行读写时   前后台切换时
             
 硬盘设计
 。存储方式
 、大小限制（100MB）
 、淘汰策略（超过7天）
 网络设计
 。图片请求最大并发量
 。请求超时策略
 图片解码
 。应用策略模式对不同图片格式进行解码
 。在那个阶段解码：  磁盘读取后   网略请求后
 
时长统计框架

记录器（页面式 流式 自定义式）
记录管理者（记录缓存，磁盘存储，上传器）

记录会丢失，怎么处理
。定时写磁盘
。限定内存缓存条数（10），超过该条数，即写磁盘
延时上传
、前后台切换
。从无网到有网
、通用轻量接口捎带
上传时机
、立刻
、延时
、定时













 
 
