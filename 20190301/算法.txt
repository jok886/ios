一共有20级楼梯，每次可以上1级或2级，登上第20级一共有多少种上法

上第1级： 1种上法

上第2级： 2种上法

上第3级： 3种上法  3 = 2 + 1

上第4级： 5种上法  5 = 3 + 2

上第5级： 8种上法  8 = 5 + 3
登上第20级台阶种类数即为该数列第二十项的数值,经计算为10946种



2. 代码

#include<stdio.h>

#include<string.h>
 

int foo(int n)
{
    
if (1 == n) {
        return 1;
    } 
  if (2 == n) {
        return 2;
    }
 if (n > 2) {
       
 return foo(n-1) + foo(n-2);
   
 }
}
 

int main(void)
{
  
  int x = foo(20);
    printf("%d\n", x);

}




翻转单向链表
struct Node * reversedNodeTree(struct Node *node) {
    if (node == NULL) {
        return NULL;
    }

    // 应将next指针放在此处，避免在每次循环时都重新分配内存给临时变量
    struct Node *tmp = node->next, *next;

    // 头结点需要将next设置为NULL，与其他节点的设置不同，就可以将其拎'出来，其余节点就可以在循环中归一处理
    node->next = NULL;

    while (tmp != NULL ) {
        next = tmp->next;
        tmp->next = node;
        node = tmp;
        tmp = next;
    }

    return node;
}

对N个字符串进行排序，并分别统计出各个字符串中重复出现次数最多的字符。

//写好啦，测试通过，如果有疑问，欢迎交流
//其中N是定义在程序里的，如果需要输入进来，我也可以再修改
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define M 100
#define N 3
void bubblesort_str(char **list,int len) //冒泡排序
{
    int i,j;
    char temp[M];
    for(i=0;i<len - 1;i++)
        for(j=0;j<len-i - 1;j++) 
        {
            if(strcmp(*(list+j+1), *(list + j)) < 0)
            {
                strcpy(temp,*(list + j+1));
                strcpy(*(list + j+1), *(list + j));
                strcpy(*(list + j) ,temp);
            }
        }
}
void sta_cout_str(char *tar){
    int cur_idx = 0;
    int sta_lib[26] = {0};
    int max_char_idx = 0;
    int cur_az_idx;
    while(tar[cur_idx]!='\0'){
        cur_az_idx = tar[cur_idx] - 'a';
        sta_lib[cur_az_idx]++;
        if(sta_lib[cur_az_idx] > sta_lib[max_char_idx]){
            max_char_idx = cur_az_idx;
        }
        cur_idx++;
    }
    printf("出现最多的字符是：%c共%d次", 'a'+max_char_idx, sta_lib[max_char_idx]);
}
int main(){
    char **names;
    names = (char**) malloc(sizeof(char*)*N);
    int i;
    for(i = 0; i<N;i++){
        names[i] = (char*) malloc(sizeof(char)*M);
        gets(names[i]);
    }
    bubblesort_str(names, N);
     
    for(i = 0; i<N; i++){
        printf("%s", names[i]);
        sta_cout_str(names[i]);
        printf("\n");
    }
    for(i = 0; i<N;i++){
        free(names[i]);
    }
    free(names);
}

10亿个数中找出最大的10000个数（top K问题）

  优化的方法：可以把所有10亿个数据分组存放，比如分别放在1000个文件中。这样处理就可以分别在每个文件的10^6个数据中找出最大的10000个数，合并到一起在再找出最终的结果。
  
  
  

有1亿个浮点数，如果找出期中最大的10000个？
        最容易想到的方法是将数据全部排序，然后在排序后的集合中进行查找，最快的排序算法的时间复杂度一般为O（nlogn），如快速排序。但是在32位的机器上，每个float类型占4个字节，1亿个浮点数就要占用400MB的存储空间，对于一些可用内存小于400M的计算机而言，很显然是不能一次将全部数据读入内存进行排序的。其实即使内存能够满足要求（我机器内存都是8GB），该方法也并不高效，因为题目的目的是寻找出最大的10000个数即可，而排序却是将所有的元素都排序了，做了很多的无用功。

        第二种方法为局部淘汰法，该方法与排序方法类似，用一个容器保存前10000个数，然后将剩余的所有数字――与容器内的最小数字相比，如果所有后续的元素都比容器内的10000个数还小，那么容器内这个10000个数就是最大10000个数。如果某一后续元素比容器内最小数字大，则删掉容器内最小元素，并将该元素插入容器，最后遍历完这1亿个数，得到的结果容器中保存的数即为最终结果了。此时的时间复杂度为O（n+m^2），其中m为容器的大小，即10000。

        第三种方法是分治法，将1亿个数据分成100份，每份100万个数据，找到每份数据中最大的10000个，
		最后在剩下的100*10000个数据里面找出最大的10000个。
		如果100万数据选择足够理想，那么可以过滤掉1亿数据里面99%的数据。
		100万个数据里面查找最大的10000个数据的方法如下：用快速排序的方法，将数据分为2堆，如果大的那堆个数N大于10000个，
		继续对大堆快速排序一次分成2堆，如果大的那堆个数N大于10000个，继续对大堆快速排序一次分成2堆，如果大堆个数N小于10000个，
		就在小的那堆里面快速排序一次，找第10000-n大的数字；递归以上过程，就可以找到第1w大的数。
		参考上面的找出第1w大数字，就可以类似的方法找到前10000大数字了。此种方法需要每次的内存空间为10^6*4=4MB，一共需要101次这样的比较。

        第四种方法是Hash法。如果这1亿个书里面有很多重复的数，先通过Hash法，把这1亿个数字去重复，这样如果重复率很高的话，会减少很大的内存用量，从而缩小运算空间，然后通过分治法或最小堆法查找最大的10000个数。

        第五种方法采用最小堆。首先读入前10000个数来创建大小为10000的最小堆，建堆的时间复杂度为O（mlogm）（m为数组的大小即为10000），然后遍历后续的数字，并于堆顶（最小）数字进行比较。如果比最小的数小，则继续读取后续数字；如果比堆顶数字大，则替换堆顶元素并重新调整堆为最小堆。整个过程直至1亿个数全部遍历完为止。然后按照中序遍历的方式输出当前堆中的所有10000个数字。该算法的时间复杂度为O（nmlogm），空间复杂度是10000（常数）。

实际运行：
        实际上，最优的解决方案应该是最符合实际设计需求的方案，在时间应用中，可能有足够大的内存，那么直接将数据扔到内存中一次性处理即可，也可能机器有多个核，这样可以采用多线程处理整个数据集。

       下面针对不容的应用场景，分析了适合相应应用场景的解决方案。

（1）单机+单核+足够大内存
        如果需要查找10亿个查询次（每个占8B）中出现频率最高的10个，考虑到每个查询词占8B，则10亿个查询次所需的内存大约是10^9 * 8B=8GB内存。如果有这么大内存，直接在内存中对查询次进行排序，顺序遍历找出10个出现频率最大的即可。这种方法简单快速，使用。然后，也可以先用HashMap求出每个词出现的频率，然后求出频率最大的10个词。

（2）单机+多核+足够大内存
        这时可以直接在内存总使用Hash方法将数据划分成n个partition，每个partition交给一个线程处理，线程的处理逻辑同（1）类似，最后一个线程将结果归并。

        该方法存在一个瓶颈会明显影响效率，即数据倾斜。每个线程的处理速度可能不同，快的线程需要等待慢的线程，最终的处理速度取决于慢的线程。而针对此问题，解决的方法是，将数据划分成c×n个partition（c>1），每个线程处理完当前partition后主动取下一个partition继续处理，知道所有数据处理完毕，最后由一个线程进行归并。

（3）单机+单核+受限内存
        这种情况下，需要将原数据文件切割成一个一个小文件，如次啊用hash(x)%M，将原文件中的数据切割成M小文件，如果小文件仍大于内存大小，继续采用Hash的方法对数据文件进行分割，知道每个小文件小于内存大小，这样每个文件可放到内存中处理。采用（1）的方法依次处理每个小文件。

（4）多机+受限内存
        这种情况，为了合理利用多台机器的资源，可将数据分发到多台机器上，每台机器采用（3）中的策略解决本地的数据。可采用hash+socket方法进行数据分发。


        从实际应用的角度考虑，（1）（2）（3）（4）方案并不可行，因为在大规模数据处理环境下，作业效率并不是首要考虑的问题，算法的扩展性和容错性才是首要考虑的。算法应该具有良好的扩展性，以便数据量进一步加大（随着业务的发展，数据量加大是必然的）时，在不修改算法框架的前提下，可达到近似的线性比；算法应该具有容错性，即当前某个文件处理失败后，能自动将其交给另外一个线程继续处理，而不是从头开始处理。

        top K问题很适合采用MapReduce框架解决，用户只需编写一个Map函数和两个Reduce 函数，然后提交到Hadoop（采用Mapchain和Reducechain）上即可解决该问题。具体而言，就是首先根据数据值或者把数据hash(MD5)后的值按照范围划分到不同的机器上，最好可以让数据划分后一次读入内存，这样不同的机器负责处理不同的数值范围，实际上就是Map。得到结果后，各个机器只需拿出各自出现次数最多的前N个数据，然后汇总，选出所有的数据中出现次数最多的前N个数据，这实际上就是Reduce过程。对于Map函数，采用Hash算法，将Hash值相同的数据交给同一个Reduce task；对于第一个Reduce函数，采用HashMap统计出每个词出现的频率，对于第二个Reduce 函数，统计所有Reduce task，输出数据中的top K即可。

        直接将数据均分到不同的机器上进行处理是无法得到正确的结果的。因为一个数据可能被均分到不同的机器上，而另一个则可能完全聚集到一个机器上，同时还可能存在具有相同数目的数据。

		
音乐随机播放算法的Shuffle实现		
#include <cstdlib>    
#include <iostream>    
using namespace std;    
   
//得到范围start~end之间的随机数   
int rand(int start, int end)    
{    
    return rand()%(end - start) + start;    
}    
    
void swap(int* a, int* b)    
{    
    *a = *a ^ *b;    
    *b = *a ^ *b;    
    *a = *a ^ *b;    
}    
void shuffle(int a[], int len)    
{    
    int key;    
    srand((unsigned int)time(NULL));//srand应该放在for循环之外   
    for(int i = 0; i< len; i++)    
    {    
        key = rand(0, len);    
        printf("key = %d\n", key);  
        swap(a[i], a[key]);  //乱序   
    }    
}    
    
int main(int argc, char *argv[])    
{    
    int a[8]={3, 5, 7, 2, 12, 1, 8, 6};    
    shuffle(a, 8);    
    for(int i = 0; i < 8; i++)    
    {    
        printf("%d\n", a[i]);    
    }    
    system("pause");    
    return 0;    
}  

 
Objective-c并没有直接提供随机数据生成的函数或方法，不过我们可以直接利用c的各种随机算法
以下是几种常见的随机数算法的使用，可以参照以下头文件
stdlib.h

arc4random
不需要随机种子，在调用时自动生成随机种子
返回[0,X)的集合
int value = arc4random() % x;
返回[1,X]的集合
int value = (arc4random() % x) + 1;



从数组中找出最小的k个数
首先，我们可以基于快速排序的算法来调整，当然这种排序会修改我们输入的数组，寻找最小的k个数，那么如果k左边的数都小于k位置的数，k右边的数都大于k位置的数，则找到k的位置即可，具体实现如下：

public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        if (input==null||input.length==0||input.length<k||k<=0) {
            return res;
        }
        int start  = 0;
        int end = input.length-1;
        int index = partition(input, start, end);
        while (index != k - 1) {
            if (index > k - 1) {
                end = index-1;
                index = partition(input, start, end);
            } else {
                start = index+1;
                index = partition(input, start, end);
            }
        }
        for (int i = 0; i < k; i++) {
            res.add(input[i]);
        }
        return res;
    }
   static int partition(int input[], int start, int end) {
        int tmp = input[start];
        while (start < end) {
            while (start < end && input[end] >= tmp) {
                end--;
            }
            input[start] = input[end];
            while (start < end && tmp >= input[start]) {
                start++;
            }
            input[end] = input[start];
        }
        input[start] = tmp;
        return start;
    }
?????? 也许很多人会问，这种算法的时间复杂度是多少呢，答案是O(n)，为什么~
--------------------- 


	
static public ArrayList<Integer> GetLeastNumbers_Solution1(int[] input, int k) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        if (input==null||input.length==0||input.length<k) {
            return res;
        }
        int []maxHeap = new int[k];
        for (int i = 0; i < maxHeap.length; i++) {
            maxHeap[i] = input[i];
        }
        for (int i = (maxHeap.length-1)/2; i >=0 ; i--) {
            adjustHeap(maxHeap, i);
        }
        for (int i = k; i <input.length ; i++) {
            if (maxHeap[0]>input[i]) {
                maxHeap[0] = input[i];
                adjustHeap(maxHeap, 0);
            }
        }
        for (int i = 0; i < maxHeap.length; i++) {
            res.add(maxHeap[i]);
        }
        return res;
    }
    static void adjustHeap(int maxHeap[],int i){
        int index = i;
        int lchild=2*i+1;       //i的左孩子节点序号 
        int rchild=2*i+2;     //i的右孩子节点序号 
        if(index<=(maxHeap.length-1)/2) {
            //寻找子节点中最大的节点
            if (lchild<maxHeap.length&&maxHeap[index]<maxHeap[lchild]) {
                index = lchild;
            }
            if (rchild<maxHeap.length&&maxHeap[index]<maxHeap[rchild]) {
                index = rchild;
            }
            if (i!=index) {
                //将节点与最大的子节点交换
                int tmp = maxHeap[index];
                maxHeap[index] = maxHeap[i];
                maxHeap[i] = tmp;
                //交换后，子树可能不满足最大推，递归调整。
                adjustHeap(maxHeap, index);
            }
        }
?????? 那么在这里我同样解释一下时间复杂度吧，从主函数中循环可以看出循环次数为n-k，当n特别大且k特别小时，n-k近似为n，然后在每次循环中进行上述时间复杂度为O(logk)的三个步骤，所以总的时间复杂度为O(nlogk)。
--------------------- 

		iOS之数组的排序（升序、降序及乱序）
#pragma mark -- 数组排序方法（升序）

- (void)arraySortASC{

    //数组排序

    //定义一个数字数组

    NSArray *array = @[@(3),@(4),@(2),@(1)];

    //对数组进行排序

    NSArray *result = [array sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {

        NSLog(@"%@~%@",obj1,obj2); //3~4 2~1 3~1 3~2

        return [obj1 compare:obj2]; //升序

    }];

    NSLog(@"result=%@",result);

}

 

#pragma mark -- 数组排序方法（降序）

- (void)arraySortDESC{

    //数组排序

    //定义一个数字数组

    NSArray *array = @[@(3),@(4),@(2),@(1)];

    //对数组进行排序

    NSArray *result = [array sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {

        NSLog(@"%@~%@",obj1,obj2); //3~4 2~1 3~1 3~2

        return [obj2 compare:obj1]; //降序

    }];

    NSLog(@"result=%@",result);

}

 

#pragma mark -- 数组排序方法（乱序）

- (void)arraySortBreak{

    //数组排序

    //定义一个数字数组

    NSArray *array = @[@(3),@(4),@(2),@(1),@(5),@(6),@(0)];

    //对数组进行排序

    NSArray *result = [array sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {

        NSLog(@"%@~%@",obj1,obj2); 

        //乱序

        if (arc4random_uniform(2) == 0) {

            return [obj2 compare:obj1]; //降序

        }

        else{

            return [obj1 compare:obj2]; //升序

        }

    }];

    NSLog(@"result=%@",result);

}

数据库如何存储100万个电话号码会比较好,如何好
但是如果是分区表的话，表数据就会按照你指定的规则分放到不同的文件里，把一个大的数据文件拆分为多个小文件，
还可以把这些小文件放在不同的磁盘下由多个cpu进行处理。这样文件的大小随着拆分而减小，还得到硬件系统的加强，
自然对我们操作数据是大大有利的。

所以大数据量的数据表，对分区的需要还是必要的，因为它可以提高select效率，还可以对历史数据经行区分存档等。
但是数据量少的数据就不要凑这个热闹啦，因为表分区会对数据库产生不必要的开销，除啦性能还会增加实现对象的管理费用和复杂性。





