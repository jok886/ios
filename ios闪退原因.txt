1.字典
（1）：key或value为nil 会崩溃：
eg:
NSDictionary *dic = @{@"key": nil}; // 崩溃
  [mutDic setObject:nil forKey:@"key"]; // 不崩溃
（2）：当字典通过key取出的值已数组接收，但其实是字符串崩溃：

eg:
 NSDictionary *dic = @{@"key": @"a"};
 NSArray *arr = dic[@"key"];  // arr其实是字符串，但编译器不会报错
 NSLog(@"%@", arr[0]);        // 崩溃

2.数组：index>数组的count造成崩溃
（1）数组越界崩溃
 eg:
 NSArray *array= @[@1, @2, @3];
 NSNumber *num = array[3]; // 崩溃

2.字符串
字符串不存在，判断字符串是否为空，

6.用try - catch
对于一些c类使用，有时抛出的异常崩溃，需要把某段逻辑写到try里面；一些由于个别业务，触发的某种异常处理，也需要把代码写到try里。
@try {
} @catch (NSException *exception) {
} @finally {
}


7.还有权限
****控制台报忠告：

This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSPhotoLibraryUsageDescription key with a string value explaining to the user how the app uses this data.****	
大致意思就是：App缺少一个获取私有数据的权限描述，需要我们在info.plist文件中必须含有一个名字叫做NSPhotoLibraryUsageDescription的值来解释为什么应用需要使用这个数据，没错，获取相册资源的键值就是NSPhotoLibraryUsageDescription


除了相册的权限，iOS10之后如下的权限请求也是需要我们填写请求描述的，在这里也给大家提醒一下:


Privacy - Microphone Usage Description //麦克风权限
Privacy - Contacts Usage Description   
//通讯录权限
Privacy - Camera Usage Description     //摄像头权限
Privacy - NSSiriUsageDescription       
//Siri的权限
Privacy - Bluetooth Peripheral Usage Description 
//蓝牙
Privacy - Reminders Usage Description  //提醒事项
Privacy - Motion Usage Description     
//运动与健康
Privacy - Media Libaray Usage Description //媒体资源库
Privacy - Calendars Usage Description  
//日历
1
2
3
4
5
6
7
8
9

内存溢出或泄露，分为下面几个方面

定时器没有释放或通知没有移除，或者循环引用，造成界面无法释放，内存增加

在for循环创建了很多局部变量，当遍历次数过多时造成内存急剧增加，崩溃， 可以通过添加@autoreleasepool解决；


eg:
for (int i = 0; i < 5000000; i++) {
     NSObject *obj = [[NSObject alloc] init];  // 内存暴增，局部变量没有释放
 }
 
解决方案
 for (int i = 0; i < 5000000; i++) {
     @autoreleasepool {
         NSObject *obj = [[NSObject alloc] init]; 
 // 内存减少， 运行时间差不多
     }
 }


10绘制图片，占用内存过大，例如UIGraphicsGetImageFromCurrentImageContext()这些方法绘制大图片,
或者加载大量高清晰体积大的图片


其中,
1是直接使用UIImageView.Image赋值;

2是参考苹果给出的demo,利用CGImageCreateWithImageInRect截取原图对应位置的内容,再通过CGContextDrawImage渲染到指定位置;

3是利用CATiledLayer层级的API,自动进行绘制;




导致加载大图内存暴涨的原因是对大图的解压缩加载。
在SDWebImage中大图禁用解压缩，可以防止内存暴涨：


[[SDImageCache sharedImageCache] setShouldDecompressImages:NO];

[[SDWebImageDownloader sharedDownloader] setShouldDecompressImages:NO];


反正是因为最终显示的地方才导致内存爆涨，只有将图片进行裁剪就好了，


@interface UIView (WebCache),最终找到了这个类，最好是button和imageview一起处理一下
- 

(void)sd_setImage:(UIImage *)image imageData:(NSData *)imageData basedOnClassOrViaCustomSetImageBlock:(SDSetImageBlock)setImageBlock transition:(SDWebImageTransition *)transition cacheType:(SDImageCacheType)cacheType imageURL:(NSURL *)imageURL {
    
UIView *view = self;
    SDSetImageBlock finalSetImageBlock;
   
 if (setImageBlock) {
        
finalSetImageBlock = setImageBlock;
    }

#if SD_UIKIT || SD_MAC
    
else 
if ([view isKindOfClass:[UIImageView class]]) {
        
UIImageView *imageView = (UIImageView *)view;
        
finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData) {
       
     //判断一下，如果图片分辨率很大，则进行裁剪
          
 UIImage *resultImage = [self compressResolvingImage:setImage];
        
   imageView.image = resultImage;
        };
    }
#endif
#if SD_UIKIT
    
else if ([view isKindOfClass:[UIButton class]]) {
    
    UIButton *button = (UIButton *)view;
       
 finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData){
      
      [button setImage:setImage forState:UIControlStateNormal];
        };
    }

#endif




/**处理分辨率大的问题*/
- (UIImage*)compressResolvingImage:(UIImage*)orginImage
{
    if(orginImage == nil)return nil;
    if(orginImage.size.width > SCREEN_WIDTH || orginImage.size.height >SCREEN_HEIGHT){
        CGSize orginSize = orginImage.size;
        if(orginSize.width >SCREEN_WIDTH){
            orginSize.height = 1.0*SCREEN_WIDTH*orginSize.height/orginSize.width;
            orginSize.width = SCREEN_WIDTH;
        }else if (orginSize.height >SCREEN_HEIGHT){
            orginSize.width = 1.0*SCREEN_HEIGHT*orginSize.width/orginSize.height;
            orginSize.height = SCREEN_HEIGHT;
        }
       return [VAImageCompressTool ResizeImageWithImage:orginImage andSize:orginSize Scale:NO];
    }else{
        return orginImage;
    }
}


- (void)didReceiveMemoryWarning {

    [superdidReceiveMemoryWarning];

    // Dispose of any resources that can be recreated.

    [[SDWebImageManagersharedManager] cancelAll];

    [[SDImageCachesharedImageCache] clearDisk];

}





11 调用一些公司用C或C++语言写的静态库，由于不能对他们进行垃圾回收，造成内存泄露或溢出，
用Instruments 来检查一下，如果你的项目是要支持长时间运行的，一定要仔细观察一下；

12 调用底层C语言框架，没对变量进行释放，造成内存泄露；

13.截取字符串、数组、NSData越界

 NSString *str = @"abcdefg";
 [str substringWithRange:NSMakeRange(0, 8)]; // 崩溃

14.多个按钮同时点击造成崩溃，在AppDelegate中设置[UIButton appearance].exclusiveTouch = YES， 避免按钮同时点击

15.资源抢夺
比如视频中在假如图片拍摄，造成闪退





StackOverflow上有人做了一些简单的测试，有限设备下迄今为止测到的结果：

iPad1: 127MB/256MB/49%

iPad2: 275MB/512MB/53%

iPad3: 645MB/1024MB/62%

iPad4: 585MB/1024MB/57% (iOS 8.1)

iPad Mini 1st Generation: 297MB/512MB/58%

iPad Mini retina: 696MB/1024MB/68% (iOS 7.1)

iPad Air: 697MB/1024MB/68%

iPad Air 2: 1383MB/2048MB/68% (iOS 10.2.1)

iPad Pro 9.7": 1395MB/1971MB/71% (iOS 10.0.2 (14A456))

iPad Pro 10.5”: 3057/4000/76% (iOS 11 beta4)

iPad Pro 12.9” (2015): 3058/3999/76% (iOS 11.2.1)

iPad Pro 12.9” (2017): 3057/3974/77% (iOS 11 beta4)

iPad Pro 11.0” (2018): 2858/3769/76% (iOS 12.1)

iPad Pro 12.9” (2018): 4598/5650/81% (iOS 12.1)

iPod touch 4th gen: 130MB/256MB/51% (iOS 6.1.1)

iPod touch 5th gen: 286MB/512MB/56% (iOS 7.0)

iPhone4: 325MB/512MB/63%

iPhone4s: 286MB/512MB/56%

iPhone5: 645MB/1024MB/62%

iPhone5s: 646MB/1024MB/63%
――――――――――――――――
iPhone6: 645MB/1024MB/62% (iOS 8.x)
iPhone6+: 645MB/1024MB/62% (iOS 8.x)
iPhone6s: 1396MB/2048MB/68% (iOS 9.2)
iPhone6s+: 1392MB/2048MB/68% (iOS 10.2.1)
iPhoneSE: 1395MB/2048MB/69% (iOS 9.3)

iPhone7: 1395/2048MB/68% (iOS 10.2)

iPhone7+: 2040MB/3072MB/66% (iOS 10.2.1)

iPhone X: 1392/2785/50% (iOS 11.2.1)

iPhone XS Max: 2039/3735/55% (iOS 12.1)
――――――――――――――――



常见程序崩溃原因：

　　1.点击某个模块或者某个功能按钮，进行页面跳转，或者获取数据。---------------------->没数据会崩溃，数据错误会崩溃。

　　2.点击某个模块或者某个功能按钮，进行页面跳转，或者获取数据。---------------------->业务逻辑处理不当会导致崩溃。

　　3.点击某个模块或者某个功能按钮，直接导致崩溃：编辑代码时无报错，编译时出错。---------------------->代码逻辑错误，或者存在闪退符号的代码。

      4.某对象无法解析每个方法，该方法没有实现。

      5.Bundle中加载不存在的资源。

一：写个方法打印崩溃日志

 程序出现异常，要获得出错的原因,测试时可以通过打印崩溃信息来查看，上线后，要把用户的崩溃日志文件上传到服务器，以待处理。

    1. 在程序启动时加上一个异常捕获监听，用来处理程序崩溃时的回调动作。

       NSSetUncaughtExceptionHandler (&UncaughtExceptionHandler);

    2. 实现自己的处理函数

       void UncaughtExceptionHandler(NSException *exception) {

    NSArray *arr = [exception callStackSymbols];//得到当前调用栈信息
    NSString *reason = [exception reason];//非常重要，就是崩溃的原因
    NSString *name = [exception name];//异常类型
      //打印错误信息：
    NSLog(@"exception type : %@ \n crash reason : %@ \n call stack info : %@", name, reason, arr);
}
二，程序中集成友盟。

友盟可以帮我们了解应用趋势、渠道分析、留存分析、行为分析、用户属性、错误分析。其中的错误分析，可以帮我们找到问题的根源。

应用趋势
















