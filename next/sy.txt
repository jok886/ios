pods:
ActionSheetPicker-3.0
Masonry
MBProgressHUD
SDCycleScrollView
SDWebImage
SocketRocket
SVProgressHUD
UAProgressView
zhPopupController

HomePageViewController  首页
DaoHangViewController   导航
HYZXViewController      我的

车主注册  油卡充值  加油支付
无感支付  导航服务 会员中心 




TextField// 禁止复制粘贴功能

-(BOOL)canPerformAction:(SEL)action withSender:(id)sender {
    
    UIMenuController * menuController = [UIMenuController sharedMenuController];
    
    if(menuController) {
        
        [UIMenuController sharedMenuController].menuVisible = NO;
        
    }
    
    return NO;
    
}

推送 SRWebSocket

银行控件 




#ifdef DEBUG
#define NSLog(...)                      NSLog(__VA_ARGS__);
#else
#define NSLog(...) {}
#endif


_mainTableView = [[UITableView alloc] initWithFrame:CGRectMake(0, kScreenHeight*2/3, kScreenWidth, kScreenHeight-140) style:UITableViewStylePlain];
    [self.view addSubview: _mainTableView];
    
    _mainTableView.delegate = self;
    _mainTableView.dataSource = self;
    _mainTableView.estimatedRowHeight = 244.0f;
//    [_mainTableView registerClass:[YouZhanViewCell class] forCellReuseIdentifier:NSStringFromClass([YouZhanViewCell class])];
    [_mainTableView registerNib:[UINib nibWithNibName:@"HomePageTableViewCell" bundle:nil] forCellReuseIdentifier:@"HomePageTableViewCell"];
    _mainTableView.backgroundColor = [UIColor whiteColor];
    [_mainTableView setSeparatorColor:[UIColor colorWithWhite:0.333 alpha:0.5]];
    _mainTableView.rowHeight = UITableViewAutomaticDimension;
    _mainTableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
    
    _mainTableView.mj_header = [ZCMCreateMJHeaderFooter setMJRefreshDragDownTarget:self refreshingAction:@selector(requestGetAreaPoint)];
    
    [self.view addSubview:_mainTableView];



   [headView addGestureRecognizer:self.panGestureRecognizer];

/**  添加拖拽手势  **/





- (UIPanGestureRecognizer *)panGestureRecognizer {
    if (!_panGestureRecognizer) {
        _panGestureRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(dragViewMoved:)];
    }
    return _panGestureRecognizer;
}


- (void)dragViewMoved:(UIPanGestureRecognizer *)panGestureRecognizer {
    
    if (panGestureRecognizer.state == UIGestureRecognizerStateChanged) {
        CGPoint translation = [panGestureRecognizer translationInView:_mainTableView];
        CGFloat heightDiff = self.tabBarController.tabBar.frame.origin.y - _mainTableView.frame.origin.y;
        NSLog(@"heightDiff:%f",heightDiff);
        NSLog(@"dragViewHight:%f",_mainTableView.frame.origin.y);
        NSLog(@"tabBarItemHight:%f",self.tabBarController.tabBar.frame.origin.y); // tabBar 高度
        
        if (_mainTableView.frame.origin.y + translation.y + 30 <= self.tabBarController.tabBar.frame.origin.y && _mainTableView.frame.origin.y + translation.y >= 100) {
            _mainTableView.center = CGPointMake(_mainTableView.center.x, _mainTableView.center.y + translation.y);
            NSLog(@"location X:%f, Y:%f",_mainTableView.center.x + translation.x, _mainTableView.center.y + translation.y);
        }
        
        //关键，不设为零会不断递增，视图会突然不见
        [panGestureRecognizer setTranslation:CGPointZero inView:self.view];
    }
}



//cell线左对齐
-(void)viewDidLayoutSubviews {
    
    if ([_mainTableView respondsToSelector:@selector(setSeparatorInset:)]) {
        [_mainTableView setSeparatorInset:UIEdgeInsetsZero];
        
    }
    if ([_mainTableView respondsToSelector:@selector(setLayoutMargins:)])  {
        [_mainTableView setLayoutMargins:UIEdgeInsetsZero];
    }
    
}

#pragma mark -- 地图代码 --

- (void)initMapView
{
    if (self.mapView == nil)
    {
        self.mapView = [[MAMapView alloc] initWithFrame:CGRectMake(0, 0, kScreenWidth, kScreenHeight)];
        [self.mapView setDelegate:self];
        self.mapView.mapType = MAMapTypeStandard;
        self.mapView.showTraffic = YES;//实时交通信息
//        self.mapView.userTrackingMode = MAUserTrackingModeFollowWithHeading;
        self.mapView.userTrackingMode = MAUserTrackingModeFollow;
        
        
        self.mapView.showsCompass = YES;//显示指南针
        _mapView.showsUserLocation = YES;
        
        _mapView.zoomLevel = 12.0;
        [self.view addSubview:self.mapView];
        [self.view sendSubviewToBack:self.mapView];
    }
    
    self.search = [[AMapSearchAPI alloc] init];
    self.search.delegate = self;
    
    
    
}


/*
                     FullName    string(30)    必须    油站名称
                     Location    string(30)    必须    位置
                     Range    string(30)    必须    距离位置
                     Rebate    string(20)    必须    折扣
                     Location_x    string    必须    经度
                     Location_y    string    必须    纬度
                     */

#pragma mark - web socket controller
- (void)connect
{
    NSLog(@"%s",__FUNCTION__);
    //    if (_webSocket.readyState == SR_OPEN) {
    //        return;
    //    }
    _webSocket.delegate = nil;
    [_webSocket close];
    
    _webSocket = [[SRWebSocket alloc] initWithURLRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:KEY_WEBSOCET_URL]]];
    
    //    _webSocket = [[SRWebSocket alloc] initWithURLRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"ws://123.58.32.141:20043"]]];
    
    _webSocket.delegate = self;
    
    NSLog(@"websocket state :%ld", (long)_webSocket.readyState);
    
    [_webSocket open];
    
}
#pragma mark - SRWebSocketDelegate

- (void)webSocketDidOpen:(SRWebSocket *)webSocket;
{
    NSLog(@"%s",__FUNCTION__);
    NSLog(@"Websocket Connected");
    NSLog(@"websocket state :%ld", (long)_webSocket.readyState);
    NSLog(@"webSocket protocol:%@", _webSocket.protocol);
    //    [_webSocket performBlock:^{
    //        [_webSocket enable];
    //    }];
    //    [_webSocket enableBackgroundingOnSocket];
    
    [self bandPushDevice];
}

-(void)bandPushDevice{
    NSLog(@"%s",__FUNCTION__);
    //链接上后绑定机身号
    
    
    
    UserInfo * info = [GlobalMethod getUserInfo];
    NSNumber * tmpType;
    NSString * identiSn;
    tmpType = [NSNumber numberWithInt:1];
    identiSn = info.userLoginId;
    //    tmpType = [NSNumber numberWithInt:2];
    //    identiSn = @"";
    NSDictionary * msgDic = [NSDictionary dictionaryWithObjectsAndKeys:@"ABde3dfg==",@"DATA",nil];
    
    NSDictionary * tmpDic =[NSDictionary dictionaryWithObjectsAndKeys:
                            [NSNumber numberWithInt:1], @"SCH",
                            @"ABCD", @"TPC",
                            identiSn,@"USR",
                            msgDic,@"MSG",
                            nil];
    NSError *error;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:tmpDic
                                                       options:NSJSONWritingPrettyPrinted // Pass 0 if you don't care about the readability of the generated string
                                                         error:&error];
    
    NSString * testStr ;
    
    if (! jsonData) {
        NSLog(@"Got an error: %@", error);
    } else {
        testStr = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    }
    [_webSocket send:testStr];
    
}

- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error;
{
    NSLog(@":( Websocket Failed With Error %@", error);
    NSLog(@"websocket state :%ld", (long)_webSocket.readyState);
    _webSocket = nil;
    
    [self connect];
}

- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessage:(id)message;
{
    NSLog(@"webSocket protocol:%@", _webSocket.protocol);
    NSLog(@"didReceiveMessage \"%@\"", message);
    //JSON解析
    NSDictionary *jsonDic = nil;
    if ([message isKindOfClass:[NSString class]]) {
        SBJSON *json = [SBJSON new];
        jsonDic = [json objectWithString:message error:nil];
    }
    
    if (jsonDic && [jsonDic isKindOfClass:[NSDictionary class]] && ([[jsonDic objectForKey:@"SCH"] intValue] == 3 || [[jsonDic objectForKey:@"SCH"] intValue] == 4 || [[jsonDic objectForKey:@"SCH"] intValue] == 5)) {

        NSDictionary * notiDic = [[jsonDic objectForKey:@"MSG"] objectForKey:@"DATA"];
        if (notiDic != nil) {
            
//            [self registerLocalNotification:0 localNotUserInfo:notiDic];
            [[NSNotificationCenter defaultCenter] postNotificationName:kNotif_updateUserMoney object:nil];
            
            [self popupAlertXiaofei:DealWithJSONStringValue([notiDic objectForKey:@"TITLE"]) message:DealWithJSONStringValue([notiDic objectForKey:@"CONTENT"]) code:DealWithJSONStringValue([notiDic objectForKey:@"CODE"])];
            
        }
        
        
    }else{
        NSLog(@"推送来的非json");
    }
    
    
}

- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(NSString *)reason wasClean:(BOOL)wasClean
{
    NSLog(@"WebSocket closed");
    NSLog(@"websocket state :%ld", (long)_webSocket.readyState);
    _webSocket = nil;
    
    [self connect];
}

- (void)webSocket:(SRWebSocket *)webSocket didReceivePong:(NSData *)pongPayload
{
    NSLog(@"Websocket received pong");
}


- (void)hasUpdateVersion{
    __weak typeof(self) weakSelf = self;
    NSDictionary *infoDic=[[NSBundle mainBundle] infoDictionary];
    NSString *currentBulidVersion=infoDic[@"CFBundleVersion"];
    
    NSDictionary *paramDic = @{@"_api_key":@"b0edbb600381aeb59f2a641895411d5b",@"appKey":@"157e35863f55f98dfb98527a5dd36901"};
    [self loadUpdateWithDic:paramDic success:^(id response) {
        if ([currentBulidVersion integerValue]<[response[@"data"][@"buildVersionNo"] integerValue]) {
            UIAlertController *_ac = [UIAlertController alertControllerWithTitle:@"版本有更新" message:@"检测到新版本,是否更新?"  preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
                [self isOpenBankCard];
                
            }];
            [_ac addAction:cancelAction];
            UIAlertAction *doneAction = [UIAlertAction actionWithTitle:@"更新" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                NSURL *url = [NSURL URLWithString:response[@"data"][@"buildShortcutUrl"]];
                [[UIApplication sharedApplication] openURL:url];
                 [self isOpenBankCard];
            }];
            [_ac addAction:doneAction];
            [weakSelf presentViewController:_ac animated:YES completion:nil];
         
            
        }
        else
        {
             [self isOpenBankCard];
        }
    }];
}
- (void)loadUpdateWithDic:(NSDictionary *)dic success:(void(^)(id response))success {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    [ manager POST:@"https://www.pgyer.com/apiv2/app/check" parameters:dic progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        [self isOpenBankCard];
        
    }];
    
}


NSArray *titleArr  = @[@"找油站",@"油卡充值",@"无感支付",@"我的账户",@"账单",@"我的车辆"];

#pragma mark -SDCycleScrollViewDelegate

- (void)cycleScrollView:(SDCycleScrollView *)cycleScrollView didSelectItemAtIndex:(NSInteger)index
{
    NSLog(@"---点击了第%ld张图片", (long)index);
    
}


// 设置本地通知
- (void)registerLocalNotification:(NSInteger)alertTime localNotUserInfo:(NSDictionary *)localNotUserInfo{
    
    [[NSNotificationCenter defaultCenter] postNotificationName:kNotif_updateUserMoney object:nil userInfo:nil];//用户金额有变动
    
    [[NSNotificationCenter defaultCenter] postNotificationName:kNotif_localNot object:localNotUserInfo];
    
    
    UILocalNotification *notification = [[UILocalNotification alloc] init];
    // 设置触发通知的时间
    NSDate *fireDate = [NSDate dateWithTimeIntervalSinceNow:alertTime];
    NSLog(@"fireDate=%@",fireDate);
    
    notification.fireDate = fireDate;
    // 时区
    notification.timeZone = [NSTimeZone defaultTimeZone];
    // 设置重复的间隔
    //    notification.repeatInterval = kCFCalendarUnitSecond;
    
    //朗读通知内容
//    [GlobalMethod playSound:[localNotUserInfo objectForKey:@"pushMsgAbstract"]];
    
    // 通知内容
    notification.alertBody =  [localNotUserInfo objectForKey:@"MSG"];
    NSInteger bordnum = [UIApplication sharedApplication].applicationIconBadgeNumber;
    notification.applicationIconBadgeNumber = ++bordnum;
    // 通知被触发时播放的声音
    notification.soundName = UILocalNotificationDefaultSoundName;
    // 通知参数
    notification.userInfo = localNotUserInfo;
    
    // ios8后，需要添加这个注册，才能得到授权
    if ([[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)]) {
        UIUserNotificationType type =  UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound;
        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:type
                                                                                 categories:nil];
        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];
        // 通知重复提示的单位，可以是天、周、月
        //        notification.repeatInterval = NSCalendarUnitSecond;
    } else {
        // 通知重复提示的单位，可以是天、周、月
        //        notification.repeatInterval = NSCalendarUnitSecond;
    }
    
    // 执行通知注册
    [[UIApplication sharedApplication] scheduleLocalNotification:notification];
    
}


-(CIImage *) generateBarCodeImage:(NSString *)source
{
    // iOS 8.0以上的系统才支持条形码的生成，iOS8.0以下使用第三方控件生成
    if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
        // 注意生成条形码的编码方式
        NSData *data = [source dataUsingEncoding: NSASCIIStringEncoding];
        CIFilter *filter = [CIFilter filterWithName:@"CICode128BarcodeGenerator"];
        [filter setValue:data forKey:@"inputMessage"];
        // 设置生成的条形码的上，下，左，右的margins的值
        [filter setValue:[NSNumber numberWithInteger:0] forKey:@"inputQuietSpace"];
        return filter.outputImage;
    }else{
        return nil;
    }
}


/*
 生成二维码图片
 */
- (UIImage *)createQRForString:(NSString *)qrString withSize:(CGFloat) size {
    // Need to convert the string to a UTF-8 encoded NSData object
    NSData *stringData = [qrString dataUsingEncoding:NSUTF8StringEncoding];
    // Create the filter
    CIFilter *qrFilter = [CIFilter filterWithName:@"CIQRCodeGenerator"];
    // Set the message content and error-correction level
    [qrFilter setValue:stringData forKey:@"inputMessage"];
    [qrFilter setValue:@"M" forKey:@"inputCorrectionLevel"];
    
    CGRect extent = CGRectIntegral(qrFilter.outputImage.extent);
    CGFloat scale = MIN(size/CGRectGetWidth(extent), size/CGRectGetHeight(extent));
    // create a bitmap image that we'll draw into a bitmap context at the desired size;
    size_t width = CGRectGetWidth(extent) * scale;
    size_t height = CGRectGetHeight(extent) * scale;
    CGColorSpaceRef cs = CGColorSpaceCreateDeviceGray();
    CGContextRef bitmapRef = CGBitmapContextCreate(nil, width, height, 8, 0, cs, (CGBitmapInfo)kCGImageAlphaNone);
    CIContext *context = [CIContext contextWithOptions:nil];
    CGImageRef bitmapImage = [context createCGImage:qrFilter.outputImage fromRect:extent];
    CGContextSetInterpolationQuality(bitmapRef, kCGInterpolationNone);
    CGContextScaleCTM(bitmapRef, scale, scale);
    CGContextDrawImage(bitmapRef, extent, bitmapImage);
    // Create an image with the contents of our bitmap
    CGImageRef scaledImage = CGBitmapContextCreateImage(bitmapRef);
    // Cleanup
    CGContextRelease(bitmapRef);
    CGImageRelease(bitmapImage);
    return [UIImage imageWithCGImage:scaledImage];
}


 CIImage * ciImage = [self generateBarCodeImage:txmStr];
    UIImage * image = [self resizeCodeImage:ciImage withSize:size];


NSArray * shengArray = [[NSArray alloc] initWithObjects:@"京",@"津",@"冀",@"晋",@"蒙",@"辽",@"吉",@"黑",@"沪",@"苏",@"浙",@"皖",@"闽",@"赣",@"鲁",@"豫",@"鄂",@"湘",@"粤",@"桂",@"琼",@"渝",@"川",@"贵",@"云",@"藏",@"陕",@"甘",@"青",@"宁",@"新", nil];


