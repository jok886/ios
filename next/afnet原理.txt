AFNetworking由五个模块组成：
分别由NSURLSession,Security,Reachability,Serialization,UIKit五部分组成

NSURLSession：网络通信模块（核心模块） 对应 AFNetworking中的 AFURLSessionManager和
对HTTP协议进行特化处理的AFHTTPSessionManager,AFHTTPSessionManager是继承于AFURLSessionmanager的

Security：网络通讯安全策略模块  对应 AFSecurityPolicy

Reachability：网络状态监听模块 对应AFNetworkReachabilityManager

Seriaalization：网络通信信息序列化、反序列化模块 对应 AFURLResponseSerialization

UIKit：对于IOSUIKit的扩展库

在AFNetworking 3.0之前，底层是通过封装NSURLConnection来实现的。 
在AFNetworking 3.0之后，也就是在iOS 9.0 之后，NSURLConnection被弃用，
苹果推荐使用NSURLSession来管理网络请求，所以AFNetworking 3.0之后，
底层是通过封装NSURLSession来实现的。

从AFNetworking 3.0中之后，下面三个方法被弃用了。

AFURLConnectionOperation 
AFHTTPRequestOperation 
AFHTTPRequestOperationManager 
依次被下面三个类代替了，同时请求方法也跟着改变了，所以AFNetworking 3.0以后发生了很大的变化。

AFURLSessionManager 
AFHTTPSessionManager 
AFNetworkReachabilityManager



AFNetworking 2.x
AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
[manager GET:@"http://example.com/resources.json" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) 
{
    NSLog(@"JSON: %@", responseObject);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];
AFNetworking 3.x
AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
[manager GET:@"http://example.com/resources.json" parameters:nil progress:nil success:^(NSURLSessionTask *task, id responseObject) 
{
    NSLog(@"JSON: %@", responseObject);
} failure:^(NSURLSessionTask *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];




网络请求的过程：
创建NSURLSessionConfig对象--用创建的config对象配置初始化NSURLSession--
创建NSURLSessionTask对象并resume执行，用delegate或者block回调返回数据
。

AFURLSessionManager封装了上述网络交互功能

AFURLSessionManager请求过程

1.初始化AFURLSessionManager。

2.获取AFURLSessionManager的Task对象

3.启动Task

AFURLSessionManager会为每一个Task创建一个AFURLSessionmanagerTaskDelegate对象，manager会让其处理各个Task的具体事务，
从而实现了manager对多个Task的管理

初始化好manager后，获取一个网络请求的Task，生成一个Task对象，
并创建了一个AFURLSessionmanagerTaskDelegate并将其关联，设置Task的上传和下载delegate，通过KVO监听download进度和upload进度

NSURLSessionDelegate的响应
因为AFURLSessionmanager所管理的AFURLSession的delegate指向其自身，因此所有的

NSURLSessiondelegate的回调地址都是AFURLSessionmanager，
而AFURLSessionmanager又会根据是否需要具体处理会将AF delegate所响应的delegate，
传递到对应的AF delegate去


AFURLSessionManager 使用方法
1、请求服务器数据

 

2、上传数据

 

3、多线程下载数据

 

AFHttpSessionManager 使用方法
 

1、post

 

2、get

 

3、上传

 
 
 
 
  普通任务和上传
NSURLSession针对下载/上传等复杂的网络操作提供了专门的解决方案，
针对普通、上传和下载分别对应三种不同的网络请求任务：NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask.。
创建的task都是挂起状态，需要resume才能执行。

当服务器返回的数据较小时，NSURLSession与NSURLConnection执行普通任务的操作步骤没有区别。

执行上传任务时，NSURLSession与NSURLConnection一样同样需要设置POST请求的请求体进行上传。

 

 下载任务方式
NSURLConnection下载文件时，先将整个文件下载到内存，然后再写入沙盒，如果文件比较大，
就会出现内存暴涨的情况。而使用NSURLSessionUploadTask下载文件，会默认下载到沙盒中的tem文件夹中，
不会出现内存暴涨的情况，但在下载完成后会将tem中的临时文件删除，需要在初始化任务方法时，在completionHandler回调中
增加保存文件的代码。

以下代码是实例化网络下载任务时将下载的文件保存到沙盒的caches文件夹中：

[NSURLSessionDownloadTask [NSURLSessionDownloadTask *task = [session downloadTaskWithURL:[NSURL URLWithString:@"http://127.0.0.1/dawenjian.zip"] completionHandler:^(NSURL * _Nullable location, NSURLResponse * _Nullable response, NSError * _Nullable error) {

   //获取沙盒的caches路径

   NSString *path = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)lastObject]stringByAppendingPathComponent:@"kkk.dmg"];

   //生成URL路径

   NSURL *DCurl = [NSURL fileURLWithPath:path];

   //将文件保存到指定文件目录下

   [[NSFileManager defaultManager]moveItemAtURL:location toURL:DCurl error:nil];   }]resume];

 

 请求方法的控制
NSURLConnection实例化对象，实例化开始，默认请求就发送（同步发送），不需要调用start方法。
而cancel 可以停止请求的发送，停止后不能继续访问，
需要创建新的请求。

NSURLSession有三个控制方法，取消（cancel），暂停（suspend），继续（resume），暂停后可以通过继续恢复当前的请求任务。

 

 断点续传的方式
NSURLConnection进行断点下载，通过设置访问请求的HTTPHeaderField的Range属性，开启运行循环，
NSURLConnection的代理方法作为运行循环的事件源，
接收到下载数据时代理方法就会持续调用，并使用NSOutputStream管道流进行数据保存。

NSURLSession进行断点下载，当暂停下载任务后，如果 downloadTask （下载任务）为非空，调用 cancelByProducingResumeData:(void (^)(NSData *resumeData))completionHandler 这个方法，这个方法接收一个参数，完成处理代码块，
这个代码块有一个 NSData 参数 resumeData，如果 resumeData 
非空，我们就保存这个对象到视图控制器的 resumeData 属性中。在点击再次下载时，通过调用 [ [self.session downloadTaskWithResumeData:self.resumeData]resume]方法进行继续下载操作。   

经过以上比较可以发现，使用NSURLSession进行断点下载更加便捷。

 

 配置信息
NSURLSession的构造方法（sessionWithConfiguration:delegate:delegateQueue）中有一个 NSURLSessionConfiguration类的参数可以设置配置信息，
其决定了cookie，安全和高速缓存策略，最大主机连接数，资源管理，网络超时等配置。NSURLConnection不能进行这个配置，相比于 NSURLConnection 
依赖于一个全局的配置对象，缺乏灵活性而言，NSURLSession 有很大的改进了。

NSURLSession可以设置三种配置信息，分别通过调用三个累方法返回配置对象：

+ (NSURLSessionConfiguration *)defaultSessionConfiguration，
配置信息使用基于硬盘的持久话Cache，保存用户的证书到钥匙串,使用共享cookie存储；

+ (NSURLSessionConfiguration *)ephemeralSessionConfiguration ，配置信息和default大致相同。除了，
不会把cache，证书，或者任何和Session
相关的数据存储到硬盘，而是存储在内存中，生命周期和Session一致。比如浏览器无痕浏览等功能就可以基于这个来做；

+ (NSURLSessionConfiguration *)backgroundSessionConfigurationWithIdentifier:(NSString *)identifier，
配置信息可以创建一个可以在后台甚至APP已经关闭的时候仍然在传输数据的session。注意，后台Session一定要在创建的时候赋予一个唯一的identifier，
这样在APP下次运行的时候，能够根据identifier来进行相关的区分。如果用户关闭了APP,IOS 系统会关闭所有的background Session。而且，
被用户强制关闭了以后，IOS系统不会主动唤醒APP，只有用户下次启动了APP，数据传输才会继续。             

 
 
 
 
 
 
 

AFSecurityPolicy
 服务器和客户端都生成相应的证书之后，iOS项目将服务器端的证书保存导入到项目中。接着AFN根据项目中的服务器的证书来进行验证。
 
 一、AFN的实现步骤：

复制代码
    NSString * requestURL = @"http://119.254.98.136/api/v1/web/homepage";
    
//    AFHTTPSessionManager * manager =[[AFHTTPSessionManager alloc] init];
    AFHTTPSessionManager * manager =[AFHTTPSessionManager manager];
    [manager GET:requestURL parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
         NSLog(@"请求成功了！");
        NSLog(@"%@",responseObject);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"请求失败了！");
    }];
复制代码
 

1、GET，或者POST等方法调用抽象的请求方法，指明相应的请求参数，
（类似全能初始化方法的作用一下，最后不管多少个初始化参数的方法，
都最后是调用了全能初始化方法），不管是什么形式的数据请求，最后是调用了全能数据请求的方法。
指明数据请求的方式以及全能的参数。

复制代码
- (NSURLSessionDataTask *)GET:(NSString *)URLString
                   parameters:(id)parameters
                     progress:(void (^)(NSProgress * _Nonnull))downloadProgress
                      success:(void (^)(NSURLSessionDataTask * _Nonnull, id _Nullable))success
                      failure:(void (^)(NSURLSessionDataTask * _Nullable, NSError * _Nonnull))failure
{

    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"GET"
                                                        URLString:URLString
                                                       parameters:parameters
                                                   uploadProgress:nil
                                                 downloadProgress:downloadProgress
                                                          success:success
                                                          failure:failure];

    [dataTask resume];

    return dataTask;
}
复制代码
 

2、对请求进行序列化，如果序列化失败，就直接执行了failure block，否则继续3

复制代码
- (NSURLSessionDataTask *)dataTaskWithHTTPMethod:(NSString *)method
                                       URLString:(NSString *)URLString
                                      parameters:(id)parameters
                                  uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress
                                downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgress
                                         success:(void (^)(NSURLSessionDataTask *, id))success
                                         failure:(void (^)(NSURLSessionDataTask *, NSError *))failure
{
    NSError *serializationError = nil;
    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:method URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:&serializationError];
    if (serializationError) {
        if (failure) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgnu"
            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{
                failure(nil, serializationError);
            });
#pragma clang diagnostic pop
        }

        return nil;
    }

    __block NSURLSessionDataTask *dataTask = nil;
    dataTask = [self dataTaskWithRequest:request
                          uploadProgress:uploadProgress
                        downloadProgress:downloadProgress
                       completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {
        if (error) {
            if (failure) {
                failure(dataTask, error);
            }
        } else {
            if (success) {
                success(dataTask, responseObject);
            }
        }
    }];

    return dataTask;
}
复制代码
 

3、为每一个NSURLSessionDataTask的dataTask增加代理

复制代码
- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request
                               uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock
                             downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock
                            completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler {

    __block NSURLSessionDataTask *dataTask = nil;
    url_session_manager_create_task_safely(^{
        dataTask = [self.session dataTaskWithRequest:request];
    });

    [self addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler];

    return dataTask;
}
复制代码
 

4、对每一个NSURLSessionDataTask的dataTask增加代理的具体实现，对dataTask设置请求之后的回调Delegate和处理block

复制代码
- (void)addDelegateForDataTask:(NSURLSessionDataTask *)dataTask
                uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock
              downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock
             completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler
{
    AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] init];
    delegate.manager = self;
    delegate.completionHandler = completionHandler;

    dataTask.taskDescription = self.taskDescriptionForSessionTasks;
    [self setDelegate:delegate forTask:dataTask];

    delegate.uploadProgressBlock = uploadProgressBlock;
    delegate.downloadProgressBlock = downloadProgressBlock;
}
复制代码
 

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgnu"
            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{
                failure(nil, serializationError);
            });
#pragma clang diagnostic pop
 

表示在这个区间里忽略一些特定的clang的编译警告，因为AFNetworking作为一个库被其他项目引用，
所以不能全局忽略clang的一些警告，
只能在有需要的时候局部这样做，作者喜欢用?:符号，所以经常见忽略-Wgnu警告的写法

 

NSURLConnection 是 Foundation URL 加载系统的基石。一个 NSURLConnection 异步地加载一个 NSURLRequest 对象，
调用 delegate 的 NSURLResponse
/ NSHTTPURLResponse 方法，其 NSData 被发送到服务器或从服务器读取；delegate 
还可用来处理 NSURLAuthenticationChallenge、重定向响应、或是决定 NSCachedURLResponse 如何存储在共享的 NSURLCache 上。

NSOperation 是抽象类，模拟单个计算单元，有状态、优先级、依赖等功能，可以取消。

AFURLConnectionOperation将两者结合， 作为 NSOperation 的子类，遵循 NSURLConnectionDelegate 的方法，可以从头到尾监视请求的状态，
并储存请求、响应、响应数据等中间状态。

 
 
 dispatch_queue_create()这个是队列的方法，第一个参数是队列的identifier，
 第二个参数则表示这个队列是串行队列还是并行队列。

如果第二个参数为DISPATCH_QUEUE_SERIAL或NULL 则表示队列为串行队列
。如果为DISPATCH_QUEUE_CONCURRENT则表示是并行队列。




/Library/Caches/default/com.hackemist.SDWebImageCache.default/

- (void)saveImageToCache:(UIImage *)image forURL:(NSURL *)url {
    
   if (image && url) 
   {
        
        NSString *key = [self cacheKeyForURL:url];
        [self.imageCache storeImage:image forKey:key toDisk:YES];
    }
}

- (NSString *)cacheKeyForURL:(NSURL *)url
 {
    if (!url) {
        return @"";
    }
    
    if (self.cacheKeyFilter) {
        return self.cacheKeyFilter(url);
    } else {
        return [url absoluteString];
    }
}


- (NSURLSessionDataTask *)POST:(NSString *)URLString
                    parameters:(id)parameters
                       headers:(NSDictionary<NSString *,NSString *> *)headers
     constructingBodyWithBlock:(void (^)(id<AFMultipartFormData> _Nonnull))block
                      progress:(void (^)(NSProgress * _Nonnull))uploadProgress
                       success:(void (^)(NSURLSessionDataTask * _Nonnull, id _Nullable))success failure:(void (^)(NSURLSessionDataTask * _Nullable, NSError * _Nonnull))failure
{
    NSError *serializationError = nil;
    NSMutableURLRequest *request = [self.requestSerializer multipartFormRequestWithMethod:@"POST" URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters constructingBodyWithBlock:block error:&serializationError];
    for (NSString *headerField in headers.keyEnumerator) {
        [request addValue:headers[headerField] forHTTPHeaderField:headerField];
    }
    if (serializationError) {
        if (failure) {
            dispatch_async(self.completionQueue ?: dispatch_get_main_queue(), ^{
                failure(nil, serializationError);
            });
        }
        
        return nil;
    }
    
    __block NSURLSessionDataTask *task = [self uploadTaskWithStreamedRequest:request progress:uploadProgress completionHandler:^(NSURLResponse * __unused response, id responseObject, NSError *error) {
        if (error) {
            if (failure) {
                failure(task, error);
            }
        } else {
            if (success) {
                success(task, responseObject);
            }
        }
    }];
    
    [task resume];
    
    return task;
}



