LFLiveKit is a opensource RTMP streaming SDK for iOS.

Support Beauty Face With GPUImage

Support H264+AAC Hardware Encoding

LFLiveSession

LFLiveVideoConfiguration

    /***  ?默认分辨率368 ＊ 640  音频：44.1 iphone6以上48  双声道  方向竖屏 ***/
 
视频配置，配置相关视频的基本信息（视频质量、码率、帧数、分辨率）和应用配置如最大、最小帧率等。       
LFLiveVideoConfiguration *videoConfiguration = [LFLiveVideoConfiguration new];
        videoConfiguration.videoSize = CGSizeMake(360, 640);
        
videoConfiguration.videoBitRate = 800*1024;
        
videoConfiguration.videoMaxBitRate = 1000*1024;
        
videoConfiguration.videoMinBitRate = 500*1024;
        
videoConfiguration.videoFrameRate = 24;
        
videoConfiguration.videoMaxKeyframeInterval = 48;
videoConfiguration.landscape = NO;
        
videoConfiguration.sessionPreset = LFCaptureSessionPreset720x1280;

/// 默认音频质量 audio sample rate: 44MHz(默认44.1Hz iphoneg6以上48Hz), audio bitrate: 64Kbps
   /**  ??自己定制单声道  */
        /*
 
音配配置，配置相关音频信息（音频质量、码率、采样率、声道数）        
LFLiveAudioConfiguration *audioConfiguration = [LFLiveAudioConfiguration new];
         audioConfiguration.numberOfChannels = 1;
         
audioConfiguration.audioBitrate = LFLiveAudioBitRate_64Kbps;
         audioConfiguration.audioSampleRate = LFLiveAudioSampleRate_44100Hz;
         
_session = [[LFLiveSession alloc] initWithAudioConfiguration:audioConfiguration videoConfiguration:[LFLiveVideoConfiguration defaultConfiguration]];
  


   _session.delegate = self;
        
_session.showDebugInfo = NO;
        
_session.preView = _AllBackGroudView;
        
        
UIImageView *imageView = [[UIImageView alloc] init];
       
 imageView.alpha = 0.8;
        
imageView.frame = CGRectMake(100, 100, 29, 29);
        
imageView.image = [UIImage imageNamed:@"ios-29x29"];
        
_session.warterMarkView = imageView;




      
self.session.beautyFace = !self.session.beautyFace;

/**
 *  切换摄像头
 */

- (void)clickConvert:(UIButton *)sender{
    
AVCaptureDevicePosition devicePositon = self.session.captureDevicePosition;
  
  self.session.captureDevicePosition = (devicePositon == AVCaptureDevicePositionBack) ? AVCaptureDevicePositionFront : AVCaptureDevicePositionBack;


}



[self.session stopLive];
            
self.session=nil;




SDCycleScrollView 无限循环自动图片轮播器(一步设置即可使用)

//_url = [NSURL URLWithString:@"rtmp://live.yimizb.com/live/iphone?auth_key=1469700310-0-0-44fca2e32869b27859c3892bd2b14183"];
    
self.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:_url withOptions:options];

ijkplayer是基于FFmpeg的跨平台播放器，这个开源项目已经被多个 App 使用，其中映客、美拍和斗鱼使用了 ijkplayer（5700+??） 

   //_url = [NSURL URLWithString:@"rtmp://live.yimizb.com/live/iphone?auth_key=1469700310-0-0-44fca2e32869b27859c3892bd2b14183"];
    self.player = [[IJKFFMoviePlayerController alloc] initWithContentURL:_url withOptions:options];
    self.player.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;
    self.player.scalingMode = IJKMPMovieScalingModeAspectFill;
    self.player.shouldAutoplay = YES;
    self.view.autoresizesSubviews = YES;
    [self.view addSubview:self.player.view];
    [self.player play];
	
请求加密
  [ProgressHUD show:nil];
    NSString *postUrl = [NSString stringWithFormat:@"%@api/action/postLogin",ALLURL];
    NSString *crypt_string = [DES3Util AES128Encrypt:[NSString stringWithFormat:@"?phone=%@&password=%@",_phoneTF.text,_passTF.text]];
    [HYBNetworking postWithUrl:postUrl refreshCache:YES params:@{@"crypt_string":crypt_string} success:^(id response) {

	
	 

//加密参数
-(NSMutableDictionary *) encryptParams:(NSDictionary *)params{
    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
    
    if(params==nil)return parameters;
    
    if([params objectForKey:@"action"]){//如果存在action 添加到外面
        [parameters setValue:params[@"action"] forKey:@"action"];
    }
    
   // if([params objectForKey:@"os"]){//如果存在action 添加到外面
   //     [parameters setValue:params[@"os"] forKey:@"os"];
   // }
    
    
    
    NSString *dataStr=@"";
   // for (NSString *key in params) {
        // NSLog(@"key: %@ value: %@", key, dict[key]);
       // dataStr = [dataStr stringByAppendingFormat:@"&%@=%@",key,params[key]];
  //  }
    
    
    
   // NSDictionary *params = @{@"user_voice_template_id":msgtemplate_id};
    
    NSMutableDictionary *pars =[[NSMutableDictionary alloc]initWithDictionary:params];
    [pars removeObjectForKey:@"action"];
    
    
    NSError *error;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:pars  options:0 error:&error];
    NSAssert(!error,@"%@",[NSString stringWithFormat:@"Error: %@", error.description]);
    NSString *datajson = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    dataStr =datajson;
    
    
    
    //去掉最前面的“&”
 //   dataStr = [dataStr substringFromIndex:1];
 //   NSLog(@"data:%@",dataStr);
    
    
    //arc4random
    NSInteger randomInteger =arc4random()%5+1;
    NSString *base64StringDataStr = [[dataStr base64String] getSSString:[dataStr base64String] andKey:randomInteger];
    
    
    // 插入到加密后的data第二位 abc   a1bc
    NSString *strindex = [NSString stringWithFormat:@"%@%ld%@",[base64StringDataStr substringToIndex:1],(long)randomInteger,[base64StringDataStr substringFromIndex:1]];
    
    
    [parameters setValue:strindex forKey:@"data"];
    
    
    
   // [parameters setValue:base64StringDataStr forKey:@"data"];
   // [parameters setValue:[NSString stringWithFormat:@"%ld",(long)randomInteger] forKey:@"op"];
    
    
    
    return parameters;
}

解压缩
// id decodeJson = [LFCGzipUtillity MyEncoding:response];	 
	
 _segBgView = [UIView new];
    //segBgView.backgroundColor = DEFAULTCOLOR_GREED;
    _segBgView.frame = CGRectMake(0, CGRectGetMaxY(_heardView.frame), 3*SCREENWIDTH/4, 50);
    [self.view addSubview:_segBgView];
    
    CGFloat scrollViewH = SCREENHEIGHT - CGRectGetMaxY(_segBgView.frame);
    
	
	 
	 
    self.segmentedControl = [[HMSegmentedControl alloc] initWithFrame:CGRectMake(0, 0, SCREENWIDTH, 60)];
    self.segmentedControl.sectionTitles = @[@"简介",@"聊天",@"排行"];
    self.segmentedControl.backgroundColor = DEFAULTCOLOR_LINGTGRAY;
    self.segmentedControl.titleTextAttributes = @{NSForegroundColorAttributeName : [UIColor darkGrayColor]};
    self.segmentedControl.selectedTitleTextAttributes = @{NSForegroundColorAttributeName : DEFAULTCOLOR};
    self.segmentedControl.selectionIndicatorColor = DEFAULTCOLOR;
    self.segmentedControl.selectionStyle = HMSegmentedControlSelectionStyleTextWidthStripe;
    self.segmentedControl.selectionIndicatorHeight = 2.0f;
    self.segmentedControl.selectionIndicatorLocation = HMSegmentedControlSelectionIndicatorLocationDown;
    __weak typeof(self) weakSelf = self;
    [self.segmentedControl setIndexChangeBlock:^(NSInteger index) {
        [weakSelf.scrollView scrollRectToVisible:CGRectMake(SCREENWIDTH * index, 0, SCREENWIDTH, scrollViewH) animated:YES];
        
    }];
    if (_segmentedControl.superview==nil) {
        [_segBgView addSubview:_segmentedControl];
    }
	
	// self.navigationItem.titleView = self.segmentedControl;
	 
  _segmentedControl.sd_layout.heightIs(50).leftSpaceToView(_segBgView,0).topSpaceToView(_segBgView,0).rightSpaceToView(_segBgView,0);
    self.scrollView = [UIScrollView new];
    self.scrollView.backgroundColor = [UIColor clearColor];
    self.scrollView.pagingEnabled = YES;
    self.scrollView.bounces = NO;
    self.scrollView.showsHorizontalScrollIndicator = NO;
    self.scrollView.showsVerticalScrollIndicator = NO;
    self.scrollView.contentSize = CGSizeMake(SCREENWIDTH* 3, scrollViewH);
    self.scrollView.delegate = self;
    [self.view addSubview:self.scrollView];
    self.scrollView.sd_layout.topSpaceToView(_segBgView,0).leftSpaceToView(self.view,0).bottomSpaceToView(self.view,0).rightSpaceToView(self.view,0);
#pragma mark scrollView添加手势
    UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hideUIViewAction)];
    [self.scrollView addGestureRecognizer:tapGesture];
	
	
	
	#pragma mark 设置礼物的UI
    UICollectionViewFlowLayout *flowLayout=[[UICollectionViewFlowLayout alloc] init];
    [flowLayout setScrollDirection: UICollectionViewScrollDirectionHorizontal];
    flowLayout.minimumInteritemSpacing = 0.01;
    flowLayout.itemSize = CGSizeMake(80, 100);
    flowLayout.sectionInset = UIEdgeInsetsMake(5, 5, 0, 0);
    _giftCollectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(SCREENWIDTH,  scrollViewH - 220, SCREENWIDTH, 120) collectionViewLayout:flowLayout];
    _giftCollectionView.backgroundColor = [UIColor colorWithRed:12/255.0 green:13/255.0 blue:14/255.0 alpha:0.7];
    _giftCollectionView.delegate = self;
    _giftCollectionView.dataSource = self;
    _giftCollectionView.showsHorizontalScrollIndicator = NO;
    [_giftCollectionView registerClass:[MagorGiftCollectionViewCell class] forCellWithReuseIdentifier:@"MagorGiftCollectionViewCellID"];
    [_scrollView addSubview:_giftCollectionView];
    _giftCollectionView.hidden = YES;
	
//广告图	
#import <SDCycleScrollView.h>   	
@property (weak, nonatomic) IBOutlet SDCycleScrollView *bannerView;

@implementation XMGHomeHeaderView

- (void)setAds:(NSArray *)ads
{
    _ads = ads;
    
    NSMutableArray *urls = [NSMutableArray array];
    
    for (XMGHomeADItem *item in ads) {
        [urls addObject:item.image];
    }
    
    _bannerView.imageURLStringsGroup = urls;
}

弹幕
UIImageView *_avatarView;
UILabel *_contentLabel;

 CGFloat speed = 75.;
        speed += random()%20;
        CGFloat time = (item.width+[[UIScreen mainScreen] bounds].size.width) / speed;
        
        [UIView animateWithDuration:time delay:0.f options:UIViewAnimationOptionAllowUserInteraction | UIViewAnimationOptionCurveEaseInOut  animations:^{
            item.left = -item.width;
        } completion:^(BOOL finished) {
            [item removeFromSuperview];
        }];


		
  _barrageList = [NSMutableArray array];
                    [self.barrageList addObject:@{@"icon":[self getImageFromURL:model.small_portrait],@"content":model.msg}];
                    self.showView.dataArray = self.barrageList;
                    [self.showView start];
                    //[self.showView stop];
					
					
@interface KSBarrageView : UIView

/**
 *  dataArray's object is NSDictionary
 *  key "avatar" is NSString or UIImage or ImageUrl
 *  key "content" is NSString
 */
@property (strong, nonatomic)NSArray *dataArray;

- (void)start;
- (void)stop;

@end


	
礼物：
 //向UIImage的桃心图片中填入随机颜色
4张随机图
UIImage * flakeImage = [UIImage imageNamed:[zanArray objectAtIndex:myRandom]];
 UIImageView* flakeView = [[UIImageView alloc] initWithImage:flakeImage];
    float fXBase = SCREENWIDTH-100;//HEART_BK_VIEW_WIDTH是窗体view的宽度
    
    float fYBase = SCREENHEIGHT-80;//HEART_BK_VIEW_HEIGHT是窗体view的高度
    
    
    
    // 设置小桃心动画起始点，X位置向右随机偏移0~19
    
    long lRandom = random();
    
    int startX = fXBase+lRandom%20;
    
    int startY = fYBase;
    
    //设置小桃心动画结束点，X位置左右偏移0~74
    
    int endX = ((lRandom%2)==0) ? (startX - lRandom%75) : (startX + lRandom%75);
    
    double scale = 1 / round(random() % 100) + 1.0;//设置桃心大小的随机偏移，这样出来的桃心大小就可以不一样
    
    double speed = 1 / round(random() % 100) + 1.0;//设置桃心飞行的速度偏移，这样每个桃心飞出来的速度就可以不一样
    
    
    
    scale = (scale > 1.5) ? 1.5 : scale;
    
    
    
    flakeView.frame = CGRectMake(startX, startY, 25.0 * scale, 25.0 * scale);//初始化桃心的frame
    

   
    @try {
        
        // 把该桃心加入到主视图中，注意在动画完成后，需要把这个桃心从主视图中remove掉
        
        [self.view addSubview:flakeView];
        
        
        
        [UIView beginAnimations:nil context:(__bridge void *)(flakeView)];
        
        // 设置桃心飞行的时间，也就是其飞行的速度
        
        float fSpeedBase = random()%5;
        
        fSpeedBase = (fSpeedBase < 3.0) ? 3.0 : fSpeedBase;
        
        float fDuration = fSpeedBase * speed;
        
        fDuration = (fDuration > 5.0) ? 5.0 : fDuration;
        
        fDuration = (fDuration <= 0) ? 2.5 : fDuration;
        
        fDuration = fDuration - 1;
        
        [UIView setAnimationDuration:fDuration];
        
        
        // 设置桃心的飞行终点！
        
        flakeView.frame = CGRectMake(endX, fYBase-SCREENHEIGHT/3-random()%50, 25.0 * scale, 25.0 * scale);
        
        
        
        // 设置桃心动画结束后的callback函数，需要在callback中将flakeView移除self.view
        
        [UIView setAnimationDidStopSelector:@selector(onAnimationComplete:finished:context:)];
        
        [UIView setAnimationDelegate:self];
        
        [UIView commitAnimations];//开始动画
        
    }
    
    @catch (NSException *exception) {
        
        NSLog(@"StartLoveShow exception...");
        
    }
	
//在动画结束后，onAnimationComplete函数中移除flakeView

- (void)onAnimationComplete:(NSString *)animationID finished:(NSNumber *)finished context:(void *)context {
    
    UIImageView *flakeView = (__bridge UIImageView *)(context);
    
    flakeView.hidden = YES;
    
    [flakeView removeFromSuperview];
    
}

//最后放入一个全屏的click事件中，就可以了，点击任何一个地方都可以出桃心

//送礼物
- (void)showMyPorsche918 {
    CGFloat durTime = 3.0;
    
    UIImageView *porsche918 = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"porsche"]];
    
    //设置汽车初始位置
    porsche918.frame = CGRectMake(0, 0, 0, 0);
    [self.view addSubview:porsche918];
    
    //给汽车添加动画
    [UIView animateWithDuration:durTime animations:^{
        
        porsche918.frame = CGRectMake(SCREENWIDTH * 0.5 - 100, SCREENHEIGHT * 0.5 - 100 * 0.5, 240, 120);
    }];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(durTime * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        //
        [UIView animateWithDuration:0.8 animations:^{
            porsche918.alpha = 0;
        } completion:^(BOOL finished) {
            [porsche918 removeFromSuperview];
        }];
    });
    
    
    
//    //烟花
//    
//    CALayer *fireworksL = [CALayer layer];
//    fireworksL.frame = CGRectMake((SCREENWIDTH - 250) * 0.5, 100, 250, 50);
//    fireworksL.contents = (id)[UIImage imageNamed:@"gift_fireworks_0"].CGImage;
//    [self.view.layer addSublayer:fireworksL];
//    
//    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(durTime * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//        [UIView animateWithDuration:0.5 animations:^{
//            //没找到设置透明度的方法，有创意可以自己写
//            //            fireworksL.alpha = 0;
//        } completion:^(BOOL finished) {
//            [fireworksL removeFromSuperlayer];
//        }];
//    });
//    _fireworksL = fireworksL;
//    
//    
//    
//    NSMutableArray *tempArray = [NSMutableArray array];
//    
//    for (int i = 1; i < 3; i++) {
//        
//        UIImage *image = [UIImage imageNamed:[NSString stringWithFormat:@"gift_fireworks_%d",i]];
//        [tempArray addObject:image];
//    }
//    _fireworksArray = tempArray;
//    
//    
//    [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(update) userInfo:nil repeats:YES];
}

static int _fishIndex = 0;

- (void)update {
    
    _fishIndex++;
    
    if (_fishIndex > 1) {
        _fishIndex = 0;
    }
    UIImage *image = self.fireworksArray[_fishIndex];
    _fireworksL.contents = (id)image.CGImage;
}

UIImageView *_avatarView;
 CGFloat speed = 75.;
        speed += random()%20;
        CGFloat time = (item.width+[[UIScreen mainScreen] bounds].size.width) / speed;
        
        [UIView animateWithDuration:time delay:0.f options:UIViewAnimationOptionAllowUserInteraction | UIViewAnimationOptionCurveEaseInOut  animations:^{
            item.left = -item.width;
        } completion:^(BOOL finished) {
            [item removeFromSuperview];
        }];


@interface KSBarrageItemView : UIView

@property (assign, nonatomic) NSInteger itemIndex;

//- (void)setAvatarUrl:(NSString *)imageUrl withContent:(NSString *)content;

- (void)setAvatarWithImage:(UIImage *)image withContent:(NSString *)content;
- (void)setAvatarWithImageString:(NSString *)imageStr withContent:(NSString *)content;

@end


送礼物：多线程 

  NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    queue.maxConcurrentOperationCount = 2; // 队列分发
    _queue = queue;
	
	
  AnimOperation *op = [[AnimOperation alloc] init]; // 初始化操作
	giftCount=1;
	giftIndex++;
	GiftModel *model1 = [[GiftModel alloc] init];
	model1.headImage = [self getImageFromURL:model.portrait];

	;
	for(int i=0;i<giftArray.count;i++){
		//containsObject 判断元素是否存在于数组中(根据两者的内存地址判断，相同：YES  不同：NO）
		if([@[giftModel.num] containsObject:[[giftArray objectAtIndex:i] objectForKey:@"gid"]]) {
		   model1.giftImage = [self getImageFromURL:[[giftArray objectAtIndex:i] objectForKey:@"url"]];
			 model1.giftName = [NSString stringWithFormat:@"送了%@",[[giftArray objectAtIndex:i] objectForKey:@"name"]];
		}  
	}
	model1.name = model.name;
	model1.giftCount = giftCount;
	op.listView = self.view; // 要添加到的父视图
	op.index = giftIndex; // 设置操作的 index
	op.model = model1; // 数据源
	[_queue addOperation:op];
						
					


@interface AnimOperation : NSOperation
@property (nonatomic,strong) PresentView *presentView;
@property (nonatomic,strong) UIView *listView;
@property (nonatomic,strong) GiftModel *model;
@property (nonatomic,assign) NSInteger index;
@end


@interface PresentView : UIView
@property (nonatomic,strong) GiftModel *model;
@property (nonatomic,strong) UIImageView *headImageView; // 头像
@property (nonatomic,strong) UIImageView *giftImageView; // 礼物
@property (nonatomic,strong) UILabel *nameLabel; // 送礼物者
@property (nonatomic,strong) UILabel *giftLabel; // 礼物名称
@property (nonatomic,assign) NSInteger giftCount; // 礼物个数

@implementation PresentView
// 根据礼物个数播放动画


	

