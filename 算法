1. 快速排序； 

- (void)viewDidLoad {
    [super viewDidLoad];

    NSMutableArray *arr = [[NSMutableArray alloc] initWithObjects:@(6), @(1),@(2),@(5),@(9),@(4),@(3),@(7),nil];
    
    [self quickSortArray:arr withLeftIndex:0 andRightIndex:arr.count - 1];
    
    NSLog(@"%@",arr);
    
}
- (void)quickSortArray:(NSMutableArray *)array withLeftIndex:(NSInteger)leftIndex andRightIndex:(NSInteger)rightIndex
{
    if (leftIndex >= rightIndex) {//如果数组长度为0或1时返回
        return ;
    }
    
    NSInteger i = leftIndex;
    NSInteger j = rightIndex;
    //记录比较基准数
    NSInteger key = [array[i] integerValue];
    
    while (i < j) {
        /**** 首先从右边j开始查找比基准数小的值 ***/
        while (i < j && [array[j] integerValue] >= key) {//如果比基准数大，继续查找
            j--;
        }
        //如果比基准数小，则将查找到的小值调换到i的位置
        array[i] = array[j];
        
        /**** 当在右边查找到一个比基准数小的值时，就从i开始往后找比基准数大的值 ***/
        while (i < j && [array[i] integerValue] <= key) {//如果比基准数小，继续查找
            i++;
        }
        //如果比基准数大，则将查找到的大值调换到j的位置
        array[j] = array[i];
        
    }
    
    //将基准数放到正确位置
    array[i] = @(key);
    
    /**** 递归排序 ***/
    //排序基准数左边的
    [self quickSortArray:array withLeftIndex:leftIndex andRightIndex:i - 1];
    //排序基准数右边的
    [self quickSortArray:array withLeftIndex:i + 1 andRightIndex:rightIndex];
}




2. 寻找二叉树中两个子节点的最低共同父节点； 
- (void)viewDidLoad {  
    [super viewDidLoad];  
      
    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"Tree" ofType:@"plist"];  
    NSDictionary *tree = [[NSDictionary alloc] initWithContentsOfFile:filePath];  
    //要查找的第一个子节点  
    NSDictionary *first = @{  
                            @"Left" : @{},  
                            @"Right" : @{},  
                            @"Value" : @(3)  
                            };  
    //要查找的第二个子节点  
    NSDictionary *second = @{  
                            @"Left" : @{},  
                            @"Right" : @{},  
                            @"Value" : @(4)  
                            };  
    NSDictionary *result = [self FindFirstCommonParentNode:tree addFirst:first andSecond:second];  
    NSLog(@"result:%@", result[@"Value"]);  
}  
  
- (NSDictionary *)FindFirstCommonParentNode:(NSDictionary *)root  
                                   addFirst:(NSDictionary *)first  
                                  andSecond:(NSDictionary *)second {  
    if (root == nil) {  
        return nil;  
    }  
    if ([root[@"Value"] integerValue]== [first[@"Value"] integerValue]  
        || [root[@"Value"] integerValue] == [second[@"Value"] integerValue]) {  
        return root;  
    }  
    // 递归遍历左子树  
    NSDictionary *left = [self FindFirstCommonParentNode:root[@"Left"] addFirst:first andSecond:second];  
    // 递归遍历右子树  
    NSDictionary *right = [self FindFirstCommonParentNode:root[@"Right"] addFirst:first andSecond:second];  
      
    if (!left) {  
        // 1、左子树没有找到任何一个结点，则第一个公共父节点必定在右子树，而且找到第一个结点就是最低共同父节点  
        return right;  
    } else if (!right) {  
        //2、右子树没有找到任何一个结点，则第一个公共父节点必定在左子树，而且找到第一个结点就是最低共同父节点  
        return left;  
    } else {  
        //3、分别在结点的左右子树找到，则此节点必为第一个公共父节点  
        return root;  
    }  
}  



3. 就地反序单向链表。 
#include <stdio.h>
 
struct list_node{
    int index;
    struct list_node *next;
};
struct list
{
    struct list_node *head;
    struct list_node *tail;
};
void reverse(struct list_node *head)
{
    if(NULL == head|| NULL == head->next )
        return;
    reverse(head->next);
    head->next->next = head;
    head->next = NULL;
}
int main()
{
    int i = 0;
    struct list list = {NULL, NULL};
    struct list_node node[10] = {0};
    struct list_node *p;
    for(i = 0; i < 9; i++)
    {
        node[i].index = i;
        node[i].next = &node[i + 1];
    }
    node[9].index = 9;
    list.head = node;
    list.tail = node + 9;
     
    reverse(list.head);
    for(p = list.tail; p; p=p->next)
    {
        printf("%d \n",p->index);
    }
        return 0; 
}  
没有被考过的，我列上几个吧： 
1. 不用中间变量,用两种方法交换A和B的值； 
int
 main(int
 argc, const
char
 * argv[]) {  

@autoreleasepool
 {  

int
 a = 10,
 b = 20;
  

NSLog(@"before,a
 = %d",a);  

NSLog(@"before,b
 = %d",b);  

//第一种方法,数学运算
  

/*  

a = a + b;  

b = a - b;  

a = a - b;  

*/
  

//第二种方法，位异或运算
  

/*
  

a = a^b;  

b = a^b;  

a = a^b;  

*/
  

//第三种方法，使用指针
  

int
 *pa = &a;  

int
 *pb = &b;  

*pa = b;  

*pb = a;  

NSLog(@"after,a
 = %d",a);  

NSLog(@"after,b
 = %d",b);  

}  

return
0;

}


2. 求最大公约数； 
int gcd(int a, int b) {
 
  int temp = 0;
 
  if (a < b) {
 
    temp = a;
 
    a = b;
 
    b = temp;
 
  }
 
  while (b != 0) {
 
    temp = a % b;
 
    a = b;
 
    b = temp;
 
  }
 
  return a;
 
}
打印2-100之间的素数。
int main(int argc, const char * argv[]) {
 
  for (int i = 2; i < 100; i++) {
 
    int r = isPrime(i);
 
    if (r == 1) {
 
      printf("%ld ", i);
 
    }
 
  }
 
  return 0;
 
}
 
 
int isPrime(int n)
{
 
  int i, s;
 
  for(i = 2; i <= sqrt(n); i++)
 
    if(n % i == 0) return 0;
 
  return 1;
 
}

//最大公约数
#import <Foundation/Foundation.h>
@interface Fenshu : NSObject
{
    int _fenzi;
    int _fenmu;
}
@property (nonatomic,assign)int fenzi;
@property (nonatomic,assign)int fenmu;
- (int)shuMax:(Fenshu *)num1
{
    int flag=num1.fenzi<num1.fenmu?num1.fenzi:num1.fenmu;
    for(int i=flag;i>=0;i--)
    {
        if(num1.fenzi%i==0&&num1.fenmu%i==0)
        {
            return i;
        }
    }
    return 1;
}


3. 模拟栈操作；

#import <Foundation/Foundation.h>
@interface NSQueue : NSObject {
NSMutableArray* m_array;
}
- (void)enqueue:(id)anObject;
- (id)dequeue;
- (void)clear;
@property (nonatomic, readonly) int count;
@end

 

#import "NSQueue.h"
@implementation NSQueue
@synthesize count;
- (id)init
{
if( self=[super init] )
{
m_array = [[NSMutableArray alloc] init];
count = 0;
}
return self;
}
- (void)dealloc {
[m_array release];
//[self dealloc]; --递你妹的归啊
    [super dealloc];
}
- (void)enqueue:(id)anObject
{
[m_array addObject:anObject];
count = m_array.count;
}
- (id)dequeue
{
    id obj = nil;
    if(m_array.count > 0)
    {
        obj = [[[m_array objectAtIndex:0]retain]autorelease];
        [m_array removeObjectAtIndex:0];
        count = m_array.count;
    }
    return obj;
}
- (void)clear
{
[m_array removeAllObjects];
        count = 0;
}
@end


